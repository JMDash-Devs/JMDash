/*
Initial design for JM- (or JMDash) - jstmax, 19/08/2024
{ jstmax! } @ { 62 69 74 2E 6C 79 2F 6D 78 5F 69 6E 66 6F }

Here's a quick explanation on its core syntax and the first functions.
(The comments work as in Cpp)

Use '#incd .{library/header file name}' to import and use a library/header file.
In this initial design file we'll discuss the functions that are already "built-in" (so the ones that work without including anything)
*/

con.out{}; // Stands for 'console.output' and, as the name says, it outputs "stuff" to the console, like text, variables or simple math.
// Example of use:
con.out{<< "Hello World!"};
// The con.out{} function basically works like Cpp's ' cout << "Hello World!" ', except it follows JM-'s syntax so after calling the function, we need to open curly braces to actually add parameters.

/*
From the example we just saw, we can point out a few things:

First thing is that as in Cpp, you need to tell the compiler that you closed a function
(so that it can pass it and go on with the next line) using the ';' character.

Second thing is a first look on JMDash's syntax, if it already wasn't clear with that example, here's another one that makes it clearer:
functionName { options } ;
You call a function by writing its name (e.g. 'functionName') and then open and close it with curly braces (e.g. '{}'), can be spaced however you like.. to an extent.
Inside the curly braces (e.g. '{option1, option2}'), you put the options/parameters.

Now that we got the basic syntax down, let's take a look at some other "built-in" functions. */

con.readline{} // Stands for 'console.readline{}' and, again as the name says, it reads the closest 'con.out{}' and can be used to write input from the user.
// Example of use:
con.out{<< "What you write's gonna get written in a string, I warned you: "};
str variableName; // Creates an empty string (which we'll discuss later)
con.readline{>> variableName};
/* Here's a little deep dive on how con.readline{}'s parameters work:
After calling the function (e.g. 'con.readline') we open curly braces (e.g. 'con.readline{') and add two closed angle brackets, this tells the function to write the data that it reads to what comes after those two closed angle brackets, like a variable (e.g. 'con.readline{>> variableName}') then we have to "close the line" with a ';' character or add more variables so that con.readline{} will store the same data into more variables. (e.g. 'con.readline{>> variableName, variableName2};') */

con.read{} // Stands for 'console.read' and exists as a more complete alternative to con.readline{}, it reads user's input from given parameter and can be used to write input from the user (e.g. in variables)
// Example of use:
str anotherVariableName; // Creates a string (which we'll discuss this later) with no data
con.read{con.out{<< "What you write's gonna get written in a string, again, I warned you: "} >> anotherVariableName};
/* As you might have imagined, the syntax is a bit more complicated than con.readline{}, but con.read{} can be more rewarding if used in more complicated instances.
Here's a deeper explanation of its parameters and syntax:
After calling the function, opening curly braces, we can insert the first parameter, if you want to ask a question to the user, and write user's input in a string variable, the syntax is shown in the above example, the first parameter is the actual source of user's input, so a question in our case, then we have the closed double angle brackets, that basically tell the function to write that input to something, and that something is in our case a variable. */


// Before continuing with conditions and loops, let's quickly talk about JM-'s data types:
int myInteger = 1; // Integer (whole numbere)
dbl myDouble = 0.99; // Floating point number
char myChar = 'A'; // Character
bool myBoolean = true; // Boolean
str myString = "My wife left me."; // String


// Now for conditions!
/* Just like in Cpp, there are 4 types of conditions:
if, else if, else, and switch.

And again, the mathematics' logical conditions are the same as Cpp;
So:
Less than: a < b
Less than or equal to: a <= b
Greater than: a > b
Greater than or equal to: a >= b
Equal to a == b
Not Equal to: a != b

Now for a quick rundown on JM-'s conditions' syntax!!! */
// For explanation's sake I will make use of the variables we created before ;)

if {myInteger == 1} > {con.out{<< "It's 1!"};} // Example of an 'if' condition.
else if {myInteger == 2} > {con.out{<< "It wasn't 1? But i just wrote it.."};} // Example of a continuation of that first 'if' condition, using an 'else if'.
else {con.out{<< "Wat?"};} // Example of a closing 'else' condition.

switch {myInteger} > 1:{con.out{<< "It's 1!!"};}; 2:{con.out{<< "It's 2, i guess.."};}; // Example of a 'switch' condition with 2 cases


// Now for loops.
/* loops have a similar syntax to conditions, so it won't be hard to explain (!) :_)
Here's a quick example: */
while {myInteger == 1} > {con.out{<< "Why is text coming out so fast?!"};} // This 'while' loop will go on forever, so let's increase the value of myInteger by 1 (this totally isn't an excuse to show to show you how to do this.)
while {myInteger == 1} > {con.out{<< "Why is text coming out so fast?!"};myInteger<+1;} // Ignore the other loop tho

// So.. here it is, the "way to increase a variable's value" or something down that line.
/* Basically the syntax treats variables as "objects", so if you want to increase an integer's value you need to call that variable (e.g. 'myInteger') and to that object (e.g. 'myInteger<') add a value of 1 to the total (e.g. 'myInteger<+1') (oh yes and then you have to close the "function" so add ';') */
myInteger<+1;

// JM- also supports C's #define, but in a peculiar way
#def {see you : return}
#def {next time : 0}
/* As you might have noticed there are 2 slightly unconventional things going on here:
First thing is that i #defined in a random piece of the code.
Second thing is that with JM-'s #define syntax modification, i was able to #def multiple words.

So as you might have already understood, #def is a function, like all the other ones, and can be used to define entire portions of code
Here's an example. */

#def {"functionName" << con.out{<< "Here you can put code!"};}
// And now to use this function:
functionName{}; // And voila!

// Other informations about JM-
// Official repo: https://github.com/maxwastakenyt/jmdash

// There are 3 libraries that are currently getting designed:
// '.frnw' That stands for 'File: Read and Write' or 'File: Read & Write' -- It is JM-'s own version of Cpp's <fstream>
// '.jmath' That stands for 'JMDash Math' -- It is JM-'s own version of Cpp's <cmath>
// '.jtime' That stands for 'JMDash Time' -- It is JM-'s own version of Cpp's <ctime>
